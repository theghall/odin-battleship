{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./node_modules/normalize.css/normalize.css","webpack:///./src/assets/css/style.scss","webpack:///./src/battleship.js","webpack:///./src/battleshipUI.js","webpack:///./src/assets/graphics/explosion10x10.png","webpack:///./src/assets/graphics/explosion20x20.png","webpack:///./src/assets/graphics/splash10x10.jpg","webpack:///./src/assets/graphics/splash20x20.jpg"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;AClFA;AAAA;AAAA;AAAA;AACA,mBAAO,CAAC,CAAe;;AAEvB;AACA;AACiC;AACjC;;AAEA,mBAAmB,mBAAO,CAAC,CAAc;AACzC,qBAAqB,mBAAO,CAAC,CAAgB;;AAE7C;AACA;AACA;;AAEA;;;;;;;ACfA,yC;;;;;;ACAA,yC;;;;;;ACAA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,2BAA2B;AACzC,iBAAiB,8BAA8B;AAC/C,cAAc,2BAA2B;AACzC,gBAAgB,6BAA6B;AAC7C,gBAAgB,6BAA6B;AAC7C,GAAG;;AAEH;AACA;AACA;AACA,iBAAiB,0CAA0C;AAC3D,KAAK;AACL;AACA;AACA,iBAAiB,wCAAwC;AACzD,KAAK;AACL;AACA;AACA,iBAAiB,wCAAwC;AACzD,KAAK;AACL;AACA;AACA,iBAAiB,wCAAwC;AACzD,KAAK;AACL;AACA;AACA,iBAAiB,wCAAwC;AACzD,KAAK;AACL;;AAEA;AACA;AACA;AACA,iBAAiB,0CAA0C;AAC3D,KAAK;AACL;AACA;AACA,iBAAiB,0CAA0C;AAC3D,KAAK;AACL;AACA;AACA,iBAAiB,0CAA0C;AAC3D,KAAK;AACL;AACA;AACA,iBAAiB,wCAAwC;AACzD,KAAK;AACL;AACA;AACA,iBAAiB,wCAAwC;AACzD,KAAK;AACL;;AAEA;AACA;AACA;AACA,iBAAiB,wCAAwC;AACzD,KAAK;AACL;AACA;AACA,iBAAiB,wCAAwC;AACzD,KAAK;AACL;AACA;AACA,iBAAiB,wCAAwC;AACzD,KAAK;AACL;AACA;AACA,iBAAiB,wCAAwC;AACzD,KAAK;AACL;AACA;AACA,iBAAiB,wCAAwC;AACzD,KAAK;AACL;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAA2C;AAC5D;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA,uCAAuC;;AAEvC;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,aAAa,WAAW;;AAExB,wBAAwB,2CAA2C;AACnE;;AAEA;AACA;;AAEA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA;;AAEA,qBAAqB,qCAAqC;AAC1D;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B,KAAK;AACL;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,KAAK;;AAEL;AACA,aAAa,WAAW;;AAExB;AACA;;AAEA;AACA;;AAEA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA,aAAa,WAAW;;AAExB;AACA;AACA;;AAEA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,cAAc;AACd,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA,aAAa,WAAW;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA,aAAa,WAAW;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA,qBAAqB,UAAU;AAC/B,uBAAuB,UAAU;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA,OAAO;AACP,8BAA8B,QAAQ;AACtC,OAAO;AACP,8BAA8B,QAAQ;AACtC;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,4BAA4B,aAAa;AACzC,KAAK;;AAEL;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA,OAAO;AACP,8BAA8B,QAAQ;AACtC;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,cAAc,IAAI,EAAE,IAAI;AACxB,GAAG;AACH;;AAEA;;;;;;;AC3gBA,mBAAmB,mBAAO,CAAC,CAAc;;AAEzC,uBAAuB,mBAAO,CAAC,CAAsC;AACrE,uBAAuB,mBAAO,CAAC,CAAsC;AACrE,oBAAoB,mBAAO,CAAC,CAAmC;AAC/D,oBAAoB,mBAAO,CAAC,CAAmC;;AAE/D;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,cAAc,KAAK;AACnB,GAAG;;AAEH;AACA,cAAc,KAAK;AACnB,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,iCAAiC,EAAE,IAAI;AACrD,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA,kCAAkC,MAAM;AACxC,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,0DAA0D,kBAAkB;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,iEAAiE,kBAAkB;AACnF;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,yCAAyC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4CAA4C;AACrE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;;AAEA,cAAc,QAAQ,EAAE,IAAI;AAC5B,GAAG;;AAEH;AACA,qBAAqB,UAAU;AAC/B,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,kCAAkC,KAAK;;AAEvC;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;;AAEzB;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;ACluBA,iBAAiB,qBAAuB,wC;;;;;;ACAxC,iBAAiB,qBAAuB,wC;;;;;;ACAxC,iBAAiB,qBAAuB,qC;;;;;;ACAxC,iBAAiB,qBAAuB,qC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// eslint-disable-next-line import/no-extraneous-dependencies\nrequire('normalize.css');\n\n// normalize.css must be loaded first before app css, so disable eslint check\n/* eslint-disable import/first */\nimport './assets/css/style.scss';\n/* eslint-enable import/first */\n\nconst battleship = require('./battleship');\nconst battleshipUI = require('./battleshipUI');\n\nfunction ready() {\n  battleshipUI.init();\n}\n\ndocument.addEventListener('DOMContentLoaded', ready);\n","// removed by extract-text-webpack-plugin","// removed by extract-text-webpack-plugin","const battleship = {\n  MISS: 0,\n  HIT: 1,\n  ATTACKED: 2,\n  INVALID: 3,\n\n  ships: {\n    carrier: { name: 'Carrier', hull: 5 },\n    battleship: { name: 'Battleship', hull: 4 },\n    cruiser: { name: 'Cruiser', hull: 3 },\n    submarine: { name: 'Submarine', hull: 3 },\n    destroyer: { name: 'Destroyer', hull: 2 },\n  },\n\n  computerSetup1: () => [\n    {\n      ship: battleship.ships.carrier,\n      position: { bowCoordinates: 'A4', bowDirection: 270 },\n    },\n    {\n      ship: battleship.ships.battleship,\n      position: { bowCoordinates: 'F6', bowDirection: 0 },\n    },\n    {\n      ship: battleship.ships.cruiser,\n      position: { bowCoordinates: 'I2', bowDirection: 0 },\n    },\n    {\n      ship: battleship.ships.submarine,\n      position: { bowCoordinates: 'I8', bowDirection: 0 },\n    },\n    {\n      ship: battleship.ships.destroyer,\n      position: { bowCoordinates: 'B8', bowDirection: 0 },\n    },\n  ],\n\n  computerSetup2: () => [\n    {\n      ship: battleship.ships.carrier,\n      position: { bowCoordinates: 'F2', bowDirection: 270 },\n    },\n    {\n      ship: battleship.ships.battleship,\n      position: { bowCoordinates: 'F5', bowDirection: 270 },\n    },\n    {\n      ship: battleship.ships.cruiser,\n      position: { bowCoordinates: 'F7', bowDirection: 270 },\n    },\n    {\n      ship: battleship.ships.submarine,\n      position: { bowCoordinates: 'C6', bowDirection: 0 },\n    },\n    {\n      ship: battleship.ships.destroyer,\n      position: { bowCoordinates: 'C2', bowDirection: 0 },\n    },\n  ],\n\n  computerSetup3: () => [\n    {\n      ship: battleship.ships.carrier,\n      position: { bowCoordinates: 'B5', bowDirection: 0 },\n    },\n    {\n      ship: battleship.ships.battleship,\n      position: { bowCoordinates: 'G2', bowDirection: 0 },\n    },\n    {\n      ship: battleship.ships.cruiser,\n      position: { bowCoordinates: 'D8', bowDirection: 0 },\n    },\n    {\n      ship: battleship.ships.submarine,\n      position: { bowCoordinates: 'J5', bowDirection: 0 },\n    },\n    {\n      ship: battleship.ships.destroyer,\n      position: { bowCoordinates: 'J1', bowDirection: 0 },\n    },\n  ],\n\n  shipGetter: state => ({\n    getName: () => state.name,\n    getLength: () => state.hull.length,\n  }),\n\n  positionable: state => ({\n    setPosition: position => {\n      state.position = position;\n    },\n    getPosition: () => state.position,\n  }),\n\n  sinkable: state => ({\n    hit: pos => {\n      state.hull[pos] = true;\n    },\n    isHit: pos => {\n      {\n        return state.hull[pos] === true;\n      }\n    },\n    isSunk: () => !state.hull.includes(false),\n  }),\n\n  createShip(ship) {\n    const hull = [];\n    // Mark each hull position as not hit\n    for (let i = 0; i < ship.hull; i += 1) {\n      hull.push(false);\n    }\n    const state = {\n      name: ship.name,\n      hull: hull,\n      position: { bowCoordinates: null, bowDirection: null },\n    };\n    return Object.assign(\n      {},\n      battleship.shipGetter(state),\n      battleship.sinkable(state),\n      battleship.positionable(state)\n    );\n  },\n\n  boardGetter: state => ({\n    getPlayerName: () => state.player,\n  }),\n\n  attackable: (state, helpers) => ({\n    receiveAttack: coordinates => {\n      if (!helpers.validCoordinates(coordinates)) {\n        return battleship.INVALID;\n      }\n\n      if (!helpers.alreadyAttacked(coordinates, state, helpers)) {\n        return helpers.markAttacked(coordinates, state, helpers);\n      } else {\n        return battleship.ATTACKED;\n      }\n    },\n  }),\n\n  tokenable: (state, helpers) => ({\n    placeShip: (ship, shipPosition) => {\n      const shipCopy = Object.assign({}, ship);\n\n      helpers.validateShipPosition(shipPosition, helpers);\n\n      helpers.validateShipPlacement(shipCopy, shipPosition, state, helpers);\n\n      helpers.placeShip(shipCopy, shipPosition, state, helpers);\n    },\n\n    removeShip: ship => {\n      const shipPosition = ship.getPosition();\n      const { row, col } = helpers.getRowCol(shipPosition.bowCoordinates);\n\n      ship.setPosition({ bowCoordinates: null, bowDirection: null });\n      state.ships.splice(state.ships.indexOf(ship));\n\n      let posRow = row;\n      let posCol = col;\n\n      for (let pos = 0; pos < ship.getLength(); pos += 1) {\n        state.board[posRow][posCol] = '';\n        const rowCol = helpers.calcNextRowCol(\n          posRow,\n          posCol,\n          shipPosition.bowDirection\n        );\n        posRow = rowCol.newRow;\n        posCol = rowCol.newCol;\n      }\n    },\n\n    allShipsPlaced: () => {\n      let allPlaced = true;\n      let neededShips = [];\n      let placedShips = [];\n\n      for (let key in battleship.ships) {\n        neededShips.push(battleship.ships[key].name);\n      }\n\n      for (let i = 0; i < state.ships.length; i += 1) {\n        placedShips.push(state.ships[i].getName());\n      }\n\n      for (let i = 0; i < neededShips.length && allPlaced; i += 1) {\n        allPlaced = placedShips.includes(neededShips[i]);\n      }\n\n      return allPlaced;\n    },\n\n    allShipsSunk: () => {\n      let sunk = [];\n\n      for (let i = 0; i < state.ships.length; i += 1) {\n        sunk.push(state.ships[i].isSunk());\n      }\n\n      return !sunk.includes(false);\n    },\n\n    getShip: shipDesc => {\n      let ship = null;\n\n      for (let i = 0; i < state.ships.length; i += 1) {\n        if (state.ships[i].getName() === shipDesc.name) {\n          ship = state.ships[i];\n          break;\n        }\n      }\n\n      return Object.assign({}, ship);\n    },\n    getSunkShips: () => {\n      let sunkShips = [];\n\n      for (let i = 0; i < state.ships.length; i += 1) {\n        if (state.ships[i].isSunk()) {\n          sunkShips.push(state.ships[i].getName());\n        }\n      }\n\n      return sunkShips;\n    },\n  }),\n\n  boardHelpers: {\n    calcNextRowCol(row, col, bowDirection) {\n      let newRow = row;\n      let newCol = col;\n      switch (bowDirection) {\n        case 0:\n          newRow += 1;\n          break;\n        case 90:\n          newCol -= 1;\n          break;\n        case 180:\n          newRow -= 1;\n          break;\n        case 270:\n          newCol += 1;\n          break;\n      }\n      return { newRow: newRow, newCol: newCol };\n    },\n\n    placeShip(ship, shipPosition, state, helpers) {\n      const { row, col } = helpers.getRowCol(shipPosition.bowCoordinates);\n\n      ship.setPosition(shipPosition);\n      state.ships.push(ship);\n\n      let posRow = row;\n      let posCol = col;\n\n      for (let pos = 0; pos < ship.getLength(); pos += 1) {\n        state.board[posRow][posCol] = ship;\n        const rowCol = helpers.calcNextRowCol(\n          posRow,\n          posCol,\n          shipPosition.bowDirection\n        );\n        posRow = rowCol.newRow;\n        posCol = rowCol.newCol;\n      }\n    },\n\n    validCoordinates(coordinates) {\n      return /^[A-J][1-9]0?$/.test(coordinates);\n    },\n\n    validBowDirection(bowDirection) {\n      const directions = [0, 90, 180, 270];\n      return directions.includes(bowDirection);\n    },\n\n    validateShipPlacement(ship, shipPosition, state, helpers) {\n      const { row, col } = helpers.getRowCol(shipPosition.bowCoordinates);\n\n      // Check if any part of ship is off board or overlaps another ship\n      let checkCol = col;\n      let checkRow = row;\n\n      for (let pos = 0; pos < ship.getLength(); pos += 1) {\n        if (checkCol < 0 || checkCol > 9 || checkRow < 0 || checkRow > 9) {\n          throw 'No part of ship can be placed off the board';\n        }\n        if (typeof state.board[checkRow][checkCol] === 'object') {\n          throw 'No part of ship can overlap another ship';\n        }\n        const rowCol = helpers.calcNextRowCol(\n          checkRow,\n          checkCol,\n          shipPosition.bowDirection\n        );\n\n        checkRow = rowCol.newRow;\n        checkCol = rowCol.newCol;\n      }\n    },\n\n    validateShipPosition(shipPosition, helpers) {\n      if (!helpers.validCoordinates(shipPosition.bowCoordinates)) {\n        throw 'Ship position is invalid';\n      }\n\n      if (!helpers.validBowDirection(shipPosition.bowDirection)) {\n        throw 'Ship must have a direction of 0, 90, 180 or 270';\n      }\n    },\n\n    getRowCol(coordinates) {\n      const col = coordinates.charCodeAt(0) - 65;\n      const row = parseInt(coordinates.substring(1, 3), 10) - 1;\n      return { row: row, col: col };\n    },\n\n    getHullPosition(ship, bRow, bCol, helpers) {\n      const shipPostion = ship.getPosition();\n      const bowRowCol = helpers.getRowCol(shipPostion.bowCoordinates);\n      const bowDirection = shipPostion.bowDirection;\n\n      let position;\n\n      switch (bowDirection) {\n        case 0:\n          position = bRow - bowRowCol.row;\n          break;\n        case 90:\n          position = bowRowCol.col - bCol;\n          break;\n        case 180:\n          position = bowRowCol.row - bRow;\n          break;\n        case 270:\n          position = bCol - bowRowCol.col;\n          break;\n      }\n\n      return position;\n    },\n\n    alreadyAttacked(coordinates, state, helpers) {\n      const { row, col } = helpers.getRowCol(coordinates);\n      const gridContent = state.board[row][col];\n\n      if (typeof gridContent === 'object') {\n        const hullPosition = helpers.getHullPosition(\n          gridContent,\n          row,\n          col,\n          helpers\n        );\n        if (gridContent.isHit(hullPosition)) {\n          return true;\n        }\n      } else if (gridContent === battleship.MISS) {\n        return true;\n      }\n      return false;\n    },\n\n    markAttacked(coordinates, state, helpers) {\n      const { row, col } = helpers.getRowCol(coordinates);\n      const gridContent = state.board[row][col];\n\n      if (typeof gridContent === 'object') {\n        const hullPosition = helpers.getHullPosition(\n          gridContent,\n          row,\n          col,\n          helpers\n        );\n        gridContent.hit(hullPosition);\n        return battleship.HIT;\n      } else {\n        state.board[row][col] = battleship.MISS;\n        return battleship.MISS;\n      }\n    },\n  },\n\n  createGameboard(player) {\n    const board = [[], [], [], [], [], [], [], [], [], []];\n\n    for (let row = 0; row < 10; row += 1) {\n      for (let col = 0; col < 10; col += 1) {\n        board[row][col] = '';\n      }\n    }\n\n    const state = {\n      player: player,\n      board: board,\n      ships: [],\n    };\n\n    return Object.assign(\n      {},\n      battleship.boardGetter(state),\n      battleship.attackable(state, battleship.boardHelpers),\n      battleship.tokenable(state, battleship.boardHelpers)\n    );\n  },\n\n  reportable: state => ({\n    getStatus: () => state.gameStatus,\n  }),\n\n  phaseable: (state, helpers) => ({\n    finalizePlacement: () => {\n      if (state.phase !== 'setup') {\n        throw 'An internal error occured';\n      }\n\n      const board1 = state.gameboards[0];\n      const board2 = state.gameboards[1];\n      const player1 = board1.getPlayerName();\n      const player2 = board2.getPlayerName();\n\n      if (board1.allShipsPlaced() && board2.allShipsPlaced()) {\n        state.gameStatus = `${player1}, your turn`;\n        state.activeGameboard = board2;\n        state.phase = 'playing';\n      } else if (board1.allShipsPlaced()) {\n        state.gameStatus = `${player2} is thinking...`;\n      } else if (board2.allShipsPlaced()) {\n        state.gameStatus = `${player1} is thinking...`;\n      }\n    },\n\n    attack: coordinates => {\n      if (state.phase !== 'playing') {\n        throw 'An internal error occured';\n      }\n\n      const board1 = state.gameboards[0];\n      const board2 = state.gameboards[1];\n      const player1 = board1.getPlayerName();\n      const player2 = board2.getPlayerName();\n\n      const result = state.activeGameboard.receiveAttack(coordinates);\n\n      if (state.activeGameboard.allShipsSunk()) {\n        helpers.setGameOver(state, player1, player2, board1);\n      }\n\n      if (state.phase !== 'over' && result !== battleship.ATTACKED) {\n        helpers.setActiveGameboard(state, player1, player2, board1, board2);\n      }\n\n      return result;\n    },\n    getPhase: () => state.phase,\n  }),\n\n  gcHelpers: {\n    setGameOver(state, player1, player2, board1) {\n      if (state.activeGameboard === board1) {\n        state.winner = player2;\n      } else {\n        state.winner = player1;\n      }\n      state.phase = 'over';\n      state.gameStatus = `${state.winner} is the winner`;\n    },\n\n    setActiveGameboard(state, player1, player2, board1, board2) {\n      if (state.activeGameboard === board2) {\n        state.gameStatus = `${player2} is thinking...`;\n        state.activeGameboard = board1;\n      } else {\n        state.gameStatus = `${player1}, your turn`;\n        state.activeGameboard = board2;\n      }\n    },\n  },\n\n  createGameController(board1, board2) {\n    const state = {\n      phase: 'setup',\n      activeGameboard: null,\n      gameboards: [board1, board2],\n      winner: null,\n      gameStatus: 'Place your ships',\n    };\n\n    return Object.assign(\n      {},\n      battleship.reportable(state),\n      battleship.phaseable(state, battleship.gcHelpers)\n    );\n  },\n\n  setUpComputerBoard(gameboard) {\n    const setups = [\n      battleship.computerSetup1,\n      battleship.computerSetup2,\n      battleship.computerSetup3,\n    ];\n\n    const setup = setups[Math.floor(Math.random() * 3)]();\n\n    for (let i = 0; i < setup.length; i += 1) {\n      const aShip = battleship.createShip(setup[i].ship);\n      gameboard.placeShip(aShip, setup[i].position);\n    }\n  },\n\n  getComputerAttackCoordinates() {\n    const col = String.fromCharCode(65 + Math.floor(Math.random() * 10));\n    const row = Math.floor(Math.random() * 10) + 1;\n    return `${col}${row}`;\n  },\n};\n\nmodule.exports = battleship;\n","const battleship = require('./battleship');\n\nconst smallExplosion = require('./assets/graphics/explosion10x10.png');\nconst largeExplosion = require('./assets/graphics/explosion20x20.png');\nconst smallSplash = require('./assets/graphics/splash10x10.jpg');\nconst largeSplash = require('./assets/graphics/splash20x20.jpg');\n\nconst battleshipUI = {\n  interfaces: {\n    playerBoard: null,\n    computerBoard: null,\n    gameController: null,\n  },\n\n  getShipCoordsName(ship) {\n    return `${ship}-bowpos`;\n  },\n\n  getShipDirectionName(ship) {\n    return `${ship}-bowdir`;\n  },\n\n  getShip(ship) {\n    switch (ship) {\n      case 'carrier':\n        return battleship.ships.carrier;\n        break;\n      case 'battleship':\n        return battleship.ships.battleship;\n        break;\n      case 'cruiser':\n        return battleship.ships.cruiser;\n        break;\n      case 'submarine':\n        return battleship.ships.submarine;\n        break;\n      case 'destroyer':\n        return battleship.ships.destroyer;\n        break;\n    }\n  },\n\n  getNextGridCoord(gridCoord, bowDirection) {\n    let colCharCode = gridCoord.charCodeAt(0);\n    let row = parseInt(gridCoord.substring(1, 3));\n\n    switch (bowDirection) {\n      case 0:\n        row += 1;\n        break;\n      case 90:\n        colCharCode -= 1;\n        break;\n      case 180:\n        row -= 1;\n        break;\n      case 270:\n        colCharCode += 1;\n        break;\n    }\n\n    return `${String.fromCharCode(colCharCode)}${row}`;\n  },\n\n  updateInfo(msg) {\n    const info = document.getElementById('info');\n    info.textContent = msg;\n  },\n\n  clearInfo() {\n    const info = document.getElementById('info');\n    info.textContent = '';\n  },\n\n  markSquares(shipObject) {\n    const shipPosition = shipObject.getPosition();\n    let markCoords = shipPosition.bowCoordinates;\n    const bowDirection = shipPosition.bowDirection;\n\n    for (let i = 0; i < shipObject.getLength(); i += 1) {\n      const cell = document.getElementById(markCoords);\n      cell.classList.add('gray');\n      markCoords = battleshipUI.getNextGridCoord(markCoords, bowDirection);\n    }\n  },\n\n  clearSquares(shipObject) {\n    const shipPosition = shipObject.getPosition();\n    let markCoords = shipPosition.bowCoordinates;\n    const bowDirection = shipPosition.bowDirection;\n\n    for (let i = 0; i < shipObject.getLength(); i += 1) {\n      const cell = document.getElementById(markCoords);\n      cell.classList.remove('gray');\n      markCoords = battleshipUI.getNextGridCoord(markCoords, bowDirection);\n    }\n  },\n\n  placeShip(ship, position) {\n    const shipObject = battleship.createShip(\n      battleshipUI.getShip(ship),\n      position\n    );\n\n    try {\n      battleshipUI.interfaces.playerBoard.placeShip(shipObject, position);\n      battleshipUI.markSquares(shipObject);\n    } catch (e) {\n      battleshipUI.updateInfo(e);\n      throw(e);\n    }\n  },\n\n  getShipDesc(shipName) {\n    let shipDesc;\n\n    switch (shipName) {\n      case 'carrier':\n        shipDesc = battleship.ships.carrier;\n        break;\n      case 'battleship':\n        shipDesc = battleship.ships.battleship;\n        break;\n      case 'cruiser':\n        shipDesc = battleship.ships.cruiser;\n        break;\n      case 'submarine':\n        shipDesc = battleship.ships.submarine;\n        break;\n      case 'destroyer':\n        shipDesc = battleship.ships.destroyer;\n        break;\n    }\n\n    return shipDesc;\n  },\n\n  removeShip(shipName) {\n    const shipObject = battleshipUI.interfaces.playerBoard.getShip(\n      battleshipUI.getShipDesc(shipName)\n    );\n\n    battleshipUI.clearSquares(shipObject);\n    battleshipUI.interfaces.playerBoard.removeShip(shipObject);\n  },\n\n  removeElement(id) {\n    const placement = document.getElementById(id);\n    placement.parentNode.removeChild(placement);\n  },\n\n  minimizePlayerBoard() {\n    const playerBoard = document.getElementById('player-board');\n    playerBoard.classList.remove('maximize');\n    playerBoard.classList.add('minimize');\n  },\n\n  createAttackGrid() {\n    const computerGrid = battleshipUI.createBattleshipGrid('computer-board');\n    computerGrid.addEventListener(\n      'click',\n      battleshipUI.listeners.attackHandler\n    );\n    return computerGrid;\n  },\n\n  addAttackPageRow1(attackWrapper) {\n    // Add empty cell\n    attackWrapper.appendChild(document.createElement('div'));\n    //  Add messages cell\n    const messages = battleshipUI.createWrapperElement('messages');\n    messages.appendChild(battleshipUI.createWrapperElement('status'));\n    messages.appendChild(battleshipUI.createWrapperElement('info'));\n    attackWrapper.appendChild(messages);\n    // Add empty cell\n    attackWrapper.appendChild(document.createElement('div'));\n  },\n\n  addAttackPageRow2(attackWrapper, oldPlayerBoard) {\n    // Add Player sideboard\n    const playerSideBoard = battleshipUI.createWrapperElement(\n      'player-sideboard'\n    );\n    playerSideBoard.appendChild(oldPlayerBoard);\n    playerSideBoard.appendChild(\n      battleshipUI.createWrapperElement('player-sunk')\n    );\n    attackWrapper.appendChild(playerSideBoard);\n    // Add Attack grid\n    attackWrapper.appendChild(battleshipUI.createAttackGrid());\n    // Add computer sideboard\n    const computerSideBoard = battleshipUI.createWrapperElement(\n      'computer-sideboard'\n    );\n    computerSideBoard.appendChild(\n      battleshipUI.createWrapperElement('computer-sunk')\n    );\n    attackWrapper.appendChild(computerSideBoard);\n  },\n\n  updateAllStatus() {\n    battleshipUI.updateStatus(\n      battleshipUI.interfaces.gameController.getStatus()\n    );\n    battleshipUI.updateInfo('Click on a square to attack it');\n    battleshipUI.updatePlayerSideboard();\n    battleshipUI.updateComputerSideboard();\n  },\n\n  buildAttackPage() {\n    const rootElement = battleshipUI.getRootElement();\n    const playerBoard = document.getElementById('player-board');\n\n    battleshipUI.minimizePlayerBoard();\n    const oldPlayerBoard = playerBoard.parentNode.removeChild(playerBoard);\n\n    battleshipUI.removeElement('setup-page');\n\n    const attackWrapper = battleshipUI.createWrapperElement('attack-page');\n\n    battleshipUI.addAttackPageRow1(attackWrapper);\n    battleshipUI.addAttackPageRow2(attackWrapper, oldPlayerBoard);\n\n    rootElement.appendChild(attackWrapper);\n\n    battleshipUI.updateAllStatus();\n  },\n\n  setImage(cell, image) {\n    cell.innerHTML = `<img src=\"${image}\">`;\n  },\n\n  markPlayerResult(cell, result) {\n    switch (result) {\n      case battleship.HIT:\n        battleshipUI.setImage(cell, largeExplosion);\n        break;\n      case battleship.MISS:\n        battleshipUI.setImage(cell, largeSplash);\n        break;\n    }\n  },\n\n  markComputerResult(attackCoordinates, result) {\n    const cell = document.querySelector(`#player-board #${attackCoordinates}`);\n\n    switch (result) {\n      case battleship.HIT:\n        battleshipUI.setImage(cell, smallExplosion);\n        break;\n      case battleship.MISS:\n        battleshipUI.setImage(cell, smallSplash);\n        break;\n    }\n  },\n\n  updateShipsSunk(elem, title, sunkShips) {\n    const newElem = battleshipUI.createWrapperElement(elem.id);\n    const ul = document.createElement('ul');\n    const listTitle = document.createElement('p');\n    listTitle.textContent = title;\n\n    newElem.appendChild(listTitle);\n    newElem.appendChild(ul);\n\n    for (let i = 0; i < sunkShips.length; i += 1) {\n      const li = document.createElement('li');\n      li.textContent = sunkShips[i];\n      ul.appendChild(li);\n    }\n    const parentElem = elem.parentNode;\n    parentElem.replaceChild(newElem, elem);\n  },\n\n  updatePlayerSideboard() {\n    const playerShipsSunkElem = document.getElementById('player-sunk');\n    const playerShipsSunk = battleshipUI.interfaces.playerBoard.getSunkShips();\n\n    battleshipUI.updateShipsSunk(\n      playerShipsSunkElem,\n      'Your ships sunk:',\n      playerShipsSunk\n    );\n  },\n\n  updateComputerSideboard() {\n    const computerShipsSunkElem = document.getElementById('computer-sunk');\n    const computerShipsSunk = battleshipUI.interfaces.computerBoard.getSunkShips();\n\n    battleshipUI.updateShipsSunk(\n      computerShipsSunkElem,\n      'Computer ships sunk:',\n      computerShipsSunk\n    );\n  },\n\n  doPlayerAttack(cell) {\n    const playerResult = battleshipUI.interfaces.gameController.attack(cell.id);\n\n    if (playerResult === battleship.HIT || playerResult === battleship.MISS) {\n      battleshipUI.markPlayerResult(cell, playerResult);\n      battleshipUI.updateStatus(\n        battleshipUI.interfaces.gameController.getStatus()\n      );\n      battleshipUI.updateComputerSideboard();\n    } else {\n      battleshipUI.updateInfo('That square has already been attacked');\n    }\n\n    return playerResult;\n  },\n\n  doComputerAttack() {\n    let attackCoordinates = null;\n    let computerResult = null;\n\n    while (\n      computerResult !== battleship.HIT &&\n      computerResult !== battleship.MISS\n    ) {\n      attackCoordinates = battleship.getComputerAttackCoordinates();\n      try {\n        computerResult = battleshipUI.interfaces.gameController.attack(\n          attackCoordinates\n        );\n      } catch (e) {\n        alert(e);\n        break;\n      }\n\n      if (computerResult === battleship.INVALID) {\n        alert(\n          `An internal error occured. Computer tried to attack ${attackCoordinates}`\n        );\n        break;\n      }\n      battleshipUI.updatePlayerSideboard();\n    }\n\n    battleshipUI.markComputerResult(attackCoordinates, computerResult);\n\n    battleshipUI.updateStatus(\n      battleshipUI.interfaces.gameController.getStatus()\n    );\n  },\n\n  startNewGame(playerName) {\n    const rootElement = battleshipUI.getRootElement();\n    const child = rootElement.firstChild;\n\n    if (child !== null) {\n      rootElement.removeChild(child);\n    }\n\n    const replay = document.getElementById('replay');\n    if (replay !== null) {\n      rootElement.removeChild(replay);\n    }\n\n    battleshipUI.interfaces.playerBoard = battleship.createGameboard(\n      playerName\n    );\n    battleshipUI.interfaces.computerBoard = battleship.createGameboard(\n      'Computer'\n    );\n    battleship.setUpComputerBoard(battleshipUI.interfaces.computerBoard);\n    battleshipUI.interfaces.gameController = battleship.createGameController(\n      battleshipUI.interfaces.playerBoard,\n      battleshipUI.interfaces.computerBoard\n    );\n    battleshipUI.buildInitalPage();\n  },\n\n  addReplayButton() {\n    const root = battleshipUI.getRootElement();\n    const button = document.createElement('button');\n    button.id = 'replay';\n    button.setAttribute('type', 'button');\n    button.textContent = 'Play Again';\n    button.classList.add('btn');\n    button.addEventListener('click', battleshipUI.listeners.handleReplay);\n\n    root.appendChild(button);\n  },\n\n  listeners: {\n    handleNameForm(e) {\n      e.preventDefault();\n\n      const form = e.target.parentNode;\n      const playerName = form.querySelector('input[name=\"player-name\"]');\n\n      if (playerName.value != '') {\n        const welcome = document.getElementById('welcome');\n        welcome.parentNode.removeChild(welcome);\n\n        battleshipUI.startNewGame(playerName.value);\n      } else {\n        alert('Name must not be blank.');\n      }\n    },\n\n    placeHandler(e) {\n      e.preventDefault();\n\n      const row = e.target.parentNode.parentNode;\n      const shipName = row.firstChild.textContent;\n      const bowCoordinates = row.querySelector(\n        `input[name=${battleshipUI.getShipCoordsName(shipName)}`\n      );\n      let bowCoordinatesVal = bowCoordinates.value;\n      bowCoordinatesVal = bowCoordinatesVal.charAt(0).toUpperCase() + bowCoordinatesVal.slice(1);\n      bowCoordinates.value = bowCoordinatesVal;\n      const bowDirection = parseInt(\n        row.querySelector(\n          `select[name=${battleshipUI.getShipDirectionName(shipName)}`\n        ).value,\n        10\n      );\n\n      battleshipUI.clearInfo();\n\n      try {\n        battleshipUI.placeShip(shipName, {\n          bowCoordinates: bowCoordinatesVal,\n          bowDirection: bowDirection,\n        });\n        e.target.setAttribute('disabled', 'disabled');\n        e.target.nextSibling.removeAttribute('disabled');\n      } catch (e) {\n        // Just doing a try to see if ship placed successfully\n      }\n    },\n\n    removeHandler(e) {\n      e.preventDefault();\n\n      const row = e.target.parentNode.parentNode;\n      const shipName = row.firstChild.textContent;\n\n      battleshipUI.clearInfo();\n      battleshipUI.removeShip(shipName);\n      e.target.setAttribute('disabled', 'disabled');\n      e.target.previousSibling.removeAttribute('disabled');\n    },\n\n    attackHandler(e) {\n      e.preventDefault();\n      const cell = e.target.nodeName === 'IMG' ? e.target.parentNode : e.target;\n\n      let gamePhase = battleshipUI.interfaces.gameController.getPhase();\n\n      battleshipUI.clearInfo();\n\n      if (gamePhase !== 'over') {\n        const result = battleshipUI.doPlayerAttack(cell);\n\n        gamePhase = battleshipUI.interfaces.gameController.getPhase();\n\n        if (result !== battleship.ATTACKED && gamePhase !== 'over') {\n          battleshipUI.doComputerAttack();\n        }\n      }\n\n      if (gamePhase === 'over' && !document.getElementById('replay')) {\n        battleshipUI.addReplayButton();\n      }\n    },\n\n    finalizePlacementHandler(e) {\n      e.preventDefault();\n\n      if (battleshipUI.interfaces.playerBoard.allShipsPlaced()) {\n        battleshipUI.interfaces.gameController.finalizePlacement();\n        battleshipUI.updateStatus(\n          battleshipUI.interfaces.gameController.getStatus()\n        );\n        battleshipUI.buildAttackPage();\n      } else {\n        battleshipUI.updateInfo('You have not placed all your ships');\n      }\n    },\n\n    handleReplay(e) {\n      e.preventDefault();\n      battleshipUI.startNewGame(\n        battleshipUI.interfaces.playerBoard.getPlayerName()\n      );\n    },\n  },\n\n  getRootElement() {\n    return document.getElementById('root');\n  },\n\n  getGridCoordinates(row, col) {\n    const gridCol = String.fromCharCode(65 + (col - 1));\n\n    return `${gridCol}${row}`;\n  },\n\n  addGridCells(gridContainer) {\n    for (let row = 0; row < 11; row += 1) {\n      for (let col = 0; col < 11; col += 1) {\n        const cell = document.createElement('div');\n        if (row === 0 && col > 0) {\n          cell.textContent = String.fromCharCode(65 + (col - 1));\n          cell.classList.add('row-header');\n        }\n        if (col == 0 && row > 0) {\n          cell.textContent = row;\n          cell.classList.add('col-header');\n        }\n        if (row !== 0 && col !== 0) {\n          cell.id = battleshipUI.getGridCoordinates(row, col);\n          cell.classList.add('cell');\n        }\n        gridContainer.appendChild(cell);\n      }\n    }\n  },\n\n  createBattleshipGrid(id) {\n    const gridContainer = document.createElement('div');\n    gridContainer.id = id;\n    gridContainer.classList.add('battle-grid');\n    gridContainer.classList.add('maximize');\n\n    battleshipUI.addGridCells(gridContainer);\n\n    return gridContainer;\n  },\n\n  createPlacementTableHeader() {\n    const headers = ['Ship', 'Bow Position', 'Bow Direction', 'Actions'];\n\n    const thead = document.createElement('thead');\n    const tr = document.createElement('tr');\n\n    for (let i = 0; i < headers.length; i += 1) {\n      const td = document.createElement('th');\n      td.textContent = headers[i];\n      tr.appendChild(td);\n    }\n\n    thead.appendChild(tr);\n    return thead;\n  },\n\n  createPositionInput(ship) {\n    const td = document.createElement('td');\n\n    const input = document.createElement('input');\n    input.setAttribute('type', 'text');\n    input.setAttribute('name', `${ship}-bowpos`);\n\n    td.appendChild(input);\n\n    return td;\n  },\n\n  createDirectionSelect(ship) {\n    const positions = ['0', '90', '180', '270'];\n    const td = document.createElement('td');\n    const select = document.createElement('select');\n    const options = document.createElement('options');\n    const name = `${ship}-bowdir`;\n\n    select.setAttribute('name', name);\n\n    for (let i = 0; i < positions.length; i += 1) {\n      const option = document.createElement('option');\n      option.textContent = positions[i];\n      select.appendChild(option);\n    }\n\n    td.appendChild(select);\n\n    return td;\n  },\n\n  createButton(content, callback, disable = false) {\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    if (disable) {\n      button.setAttribute('disabled', 'disabled');\n    }\n    button.textContent = content;\n    button.classList.add('btn');\n    button.addEventListener('click', callback);\n\n    return button;\n  },\n\n  createActionButtons() {\n    const td = document.createElement('td');\n\n    td.appendChild(\n      battleshipUI.createButton('Place', battleshipUI.listeners.placeHandler)\n    );\n    td.appendChild(\n      battleshipUI.createButton('Remove', battleshipUI.listeners.removeHandler, true)\n    );\n\n    return td;\n  },\n\n  addPlacementTableRows(ships, table) {\n    const tbody = document.createElement('tbody');\n\n    for (let i = 0; i < ships.length; i += 1) {\n      const tr = document.createElement('tr');\n      const td = document.createElement('td');\n\n      td.textContent = ships[i];\n      tr.appendChild(td);\n\n      tr.appendChild(battleshipUI.createPositionInput(ships[i]));\n      tr.appendChild(battleshipUI.createDirectionSelect(ships[i]));\n      tr.appendChild(battleshipUI.createActionButtons());\n\n      tbody.appendChild(tr);\n    }\n    table.appendChild(tbody);\n  },\n\n  createPlacementTable() {\n    const ships = [\n      'carrier',\n      'battleship',\n      'cruiser',\n      'submarine',\n      'destroyer',\n    ];\n\n    const table = document.createElement('table');\n\n    table.appendChild(battleshipUI.createPlacementTableHeader());\n    battleshipUI.addPlacementTableRows(ships, table);\n\n    return table;\n  },\n\n  createPlacementContainer() {\n    const div = document.createElement('div');\n    div.id = 'placement';\n\n    div.appendChild(battleshipUI.createPlacementTable());\n    div.appendChild(\n      battleshipUI.createButton(\n        'Finalize Placement',\n        battleshipUI.listeners.finalizePlacementHandler\n      )\n    );\n\n    return div;\n  },\n\n  createWrapperElement(id) {\n    const div = document.createElement('div');\n    div.id = id;\n    return div;\n  },\n\n  createNoticeElement(id) {\n    const div = document.createElement('div');\n    div.id = id;\n    return div;\n  },\n\n  updatInfo(text) {\n    const infoElem = document.getElementById('info');\n\n    infoElem.textContent = text;\n  },\n  updateStatus(text) {\n    const statusElem = document.getElementById('status');\n\n    statusElem.textContent = text;\n  },\n\n  buildInitalPage() {\n    const rootElement = battleshipUI.getRootElement();\n\n    const setupPage = battleshipUI.createWrapperElement('setup-page');\n    setupPage.appendChild(battleshipUI.createNoticeElement('status'));\n    setupPage.appendChild(battleshipUI.createNoticeElement('info'));\n    setupPage.appendChild(battleshipUI.createBattleshipGrid('player-board'));\n    setupPage.appendChild(\n      battleshipUI.createPlacementContainer(battleshipUI.listeners.placeHandler)\n    );\n    rootElement.appendChild(setupPage);\n\n    battleshipUI.updateStatus(\n      battleshipUI.interfaces.gameController.getStatus()\n    );\n  },\n\n  buildNameForm() {\n    const rootElement = battleshipUI.getRootElement();\n\n    const div = battleshipUI.createWrapperElement('welcome');\n    const p = document.createElement('p');\n    p.textContent = 'Welcome to Battleship!';\n    div.appendChild(p);\n\n    const form = document.createElement('form');\n    form.id = 'player-name';\n    form.setAttribute('action', '#');\n\n    const label = document.createElement('label');\n    label.setAttribute('for', 'player-name');\n    label.textContent = 'Name:';\n    form.appendChild(label);\n\n    const input = document.createElement('input');\n    input.setAttribute('type', 'text');\n    input.setAttribute('name', 'player-name');\n    input.setAttribute('required', 'required');\n    form.appendChild(input);\n\n    const submit = document.createElement('input');\n    submit.setAttribute('type', 'submit');\n    submit.setAttribute('value', 'Enter Game');\n    submit.classList.add('btn');\n    form.append(submit);\n\n    submit.addEventListener('click', battleshipUI.listeners.handleNameForm);\n\n    div.append(form);\n    rootElement.appendChild(div);\n  },\n\n  init(playerBoard, computerBoard, gameController) {\n    battleshipUI.buildNameForm();\n  },\n};\n\nmodule.exports = battleshipUI;\n","module.exports = __webpack_public_path__ + \"assets/graphics/explosion10x10.png\";","module.exports = __webpack_public_path__ + \"assets/graphics/explosion20x20.png\";","module.exports = __webpack_public_path__ + \"assets/graphics/splash10x10.jpg\";","module.exports = __webpack_public_path__ + \"assets/graphics/splash20x20.jpg\";"],"sourceRoot":""}